<div id='map'>
</div>

<% content_for :after_js do %>
    <script>
      var target = document.getElementById('places-search')
      var observer = new MutationObserver(function() {
        console.log(jsonCoordinates);
      });
      observer.observe(target, {
        childList: true,
        subtree: true
      });
    </script>
    <% end %>

<script>
      mapboxgl.accessToken = "<%= ENV['MAPBOX-API'] %>";
      var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/isaiahdahl/cjaaaxy4k29zp2sppk3069h2s',
        pitch: 60,
        center: [<%= @distrikt.longitude %>, <%= @distrikt.latitude %>],
        bearing: -17.6,
        zoom: 14,
      });

      features = <%= raw @places_coordinates.to_json %>

      map.addControl(new mapboxgl.NavigationControl());

      map.on('load', function() {
        var layers = map.getStyle().layers;

        var labelLayerId;
        for (var i = 0; i < layers.length; i++) {
          if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
            labelLayerId = layers[i].id;
            break;
          }
        }

        <% unless @distrikt.outline.empty? %>
        map.addLayer({
          'id': 'maine',
          'type': 'fill',
          'source': {
            'type': 'geojson',
            'data': {
              'type': 'Feature',
              'geometry': {
                'type': 'Polygon',
                'coordinates': [<%= @distrikt.outline %>]
              }
            }
          },
          'layout': {},
          'paint': {
            'fill-color': '#f1cb1d',
            'fill-opacity': 0.3
          }
        });
        <% end %>
        map.addLayer({
          'id': '3d-buildings',
          'source': 'composite',
          'source-layer': 'building',
          'filter': ['==', 'extrude', 'true'],
          'type': 'fill-extrusion',
          'minzoom': 15,
          'paint': {
            'fill-extrusion-color': '#aaa',

            // use an 'interpolate' expression to add a smooth transition effect to the
            // buildings as the user zooms in
            'fill-extrusion-height': [
              "interpolate", ["linear"], ["zoom"],
              15, 0,
              15.05, ["get", "height"]
            ],
            'fill-extrusion-base': [
              "interpolate", ["linear"], ["zoom"],
              15, 0,
              15.05, ["get", "min_height"]
            ],
            'fill-extrusion-opacity': .6
          }
        }, labelLayerId);
    map.loadImage('<%= image_path("marker-map.png") %>', function(error, image) {
        if (error) throw error;
        map.addImage('cat', image);
        map.addLayer({
            "id": "points",
            "type": "symbol",
            "source": {
                "type": "geojson",
                "data": {
                    "type": "FeatureCollection",
                    "features": <%= raw @places_coordinates.to_json %>
                }
            },
            "layout": {
                "icon-image": "cat",
                "icon-size": 0.07,
                "icon-allow-overlap": true
            }
        });
    });


          window._mapPopups = [];
          features.forEach(function (feature, index){
            var place = document.getElementById('place-' + feature.id);
            var popup = new mapboxgl.Popup()
              .setLngLat(features[index].geometry.coordinates)
              .setHTML(features[index].properties.description)

            window._mapPopups.push(popup);
            place.addEventListener('mouseover', function (e) {
              map.flyTo({
                center: features[index].geometry.coordinates,
                zoom: 14,
                pitch: 50
              });
                popup.addTo(map);
            });
            place.addEventListener('mouseleave', function (e) {
              map.flyTo({
                center: [<%= @distrikt.longitude %>, <%= @distrikt.latitude %>],
                pitch: 60
              });
              popup.remove();
            });
          });

        var popups = new mapboxgl.Popup({
          closeButton: false,
          closeOnClick: true
        });

        map.on('click', 'points', function(e) {
          // Change the cursor style as a UI indicator.
          map.flyTo({
            center: e.features[0].geometry.coordinates,
            pitch: 50
          });
          // Populate the popup and set its coordinates
          // based on the feature found.
          popups.setLngLat(e.features[0].geometry.coordinates)
            .setHTML(e.features[0].properties.description)
            .addTo(map);
        });

        map.on('mouseleave', 'points', function() {
          setTimeout(function() {
            map.getCanvas().style.cursor = '';
            popups.remove();
          }, 1500);
        });




        // Change the cursor to a pointer when the it enters a feature in the 'symbols' layer.
        map.on('mouseenter', 'points', function () {
          map.getCanvas().style.cursor = 'pointer';
        });

        // Change it back to a pointer when it leaves.
        map.on('mouseleave', 'points', function () {
          map.getCanvas().style.cursor = '';
        });
        map.scrollZoom.disable();
});


    // When a click event occurs on a feature in the places layer, open a popup at the
    // location of the feature, with description HTML from its properties.


</script>
